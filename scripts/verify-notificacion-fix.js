#!/usr/bin/env node

/**
 * Script para verificar el estado de la tabla Notificacion despu√©s del fix RLS
 * Uso: node scripts/verify-notificacion-fix.js
 */

require("dotenv").config();
const { createClient } = require("@supabase/supabase-js");

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseAnonKey) {
  console.error("‚ùå Missing Supabase URL or Anon Key");
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseAnonKey);

async function verificarNotificacion() {
  console.log("üîç Verificando tabla Notificacion despu√©s del fix RLS...\n");

  try {
    // Test 1: Verificar acceso b√°sico a la tabla
    console.log("üìã Test 1: Acceso b√°sico a la tabla");
    console.log("‚îÄ".repeat(40));

    const { data, error, count } = await supabase
      .from("Notificacion")
      .select("*", { count: "exact", head: true });

    if (error) {
      console.log(`‚ùå Error de acceso: ${error.message}`);
      console.log(`   Code: ${error.code}`);
      console.log(`   Details: ${error.details}`);
      return;
    } else {
      console.log(`‚úÖ Acceso OK - ${count || 0} registros en la tabla`);
    }

    // Test 2: Test r√°pido de Realtime
    console.log("\nüîÑ Test 2: Suscripci√≥n Realtime");
    console.log("‚îÄ".repeat(40));

    let subscriptionSuccess = false;
    let subscriptionError = null;

    const testChannel = supabase
      .channel("test-notificacion-fix")
      .on(
        "postgres_changes",
        { event: "*", schema: "public", table: "Notificacion" },
        (payload) => {
          console.log(`üì° Evento Realtime recibido:`, payload.eventType);
        }
      );

    // Crear promesa para la suscripci√≥n
    const subscriptionPromise = new Promise((resolve, reject) => {
      testChannel.subscribe((status, err) => {
        if (err) {
          subscriptionError = err;
          reject(err);
        } else {
          subscriptionSuccess = true;
          resolve(status);
        }
      });
    });

    // Timeout de 8 segundos
    const timeoutPromise = new Promise((_, reject) => {
      setTimeout(() => reject(new Error("Timeout")), 8000);
    });

    try {
      const status = await Promise.race([subscriptionPromise, timeoutPromise]);
      console.log(`‚úÖ Suscripci√≥n Realtime exitosa - Status: ${status}`);
      console.log(`‚úÖ Schema mismatch solucionado!`);
    } catch (err) {
      if (err.message === "Timeout") {
        console.log(
          `‚ö†Ô∏è Timeout en suscripci√≥n (puede ser normal si no hay tr√°fico)`
        );
        if (subscriptionSuccess) {
          console.log(`‚úÖ Pero la suscripci√≥n se estableci√≥ correctamente`);
        }
      } else {
        console.log(`‚ùå Error en suscripci√≥n: ${err.message}`);
        if (
          err.message?.includes("mismatch between server and client bindings")
        ) {
          console.log(`üö® PROBLEMA: Schema mismatch a√∫n presente`);
          console.log(
            `üí° SOLUCI√ìN: Verificar que Realtime est√© habilitado en Supabase Dashboard`
          );
        }
      }
    }

    // Limpiar
    supabase.removeChannel(testChannel);

    // Resultado final
    console.log("\nüìä RESULTADO DEL DIAGN√ìSTICO");
    console.log("‚ïê".repeat(50));

    if (!error && subscriptionSuccess) {
      console.log("üéâ ¬°TODO CORRECTO!");
      console.log("‚úÖ Tabla accesible");
      console.log("‚úÖ Realtime funcionando");
      console.log("üí° Puedes reactivar ENABLE_NOTIFICACIONES_REALTIME = true");
    } else if (!error) {
      console.log("‚ö†Ô∏è PARCIALMENTE CORRECTO");
      console.log("‚úÖ Tabla accesible");
      console.log("‚ùå Realtime con problemas");
      console.log(
        "üí° Verificar que Realtime est√© habilitado en Supabase Dashboard"
      );
    } else {
      console.log("‚ùå PROBLEMAS DETECTADOS");
      console.log("‚ùå Pol√≠ticas RLS a√∫n tienen problemas");
      console.log("üí° Revisar pol√≠ticas en Supabase Dashboard");
    }
  } catch (globalError) {
    console.log(`‚ùå Error global: ${globalError.message}`);
  }
}

// Ejecutar verificaci√≥n
verificarNotificacion().catch((error) => {
  console.error("‚ùå Error en verificaci√≥n:", error.message);
  process.exit(1);
});
