/**
 * üß™ Test de Estados de Cancelaci√≥n
 *
 * Este script verifica que los estados de "cancelando" funcionen correctamente
 * simulando m√∫ltiples clics y verificando que los botones se deshabiliten.
 */

const BASE_URL = "http://localhost:3000";
const COTIZACION_ID = "cmeqdh8dv0003gukz2kgep13a";

async function testEstadosCancelacion() {
  console.log("üß™ === TEST: ESTADOS DE CANCELACI√ìN ===");
  console.log(
    "üéØ Objetivo: Verificar que los botones se deshabiliten durante cancelaci√≥n"
  );

  let paymentIntentId = null;

  // 1. Crear Payment Intent
  console.log("\nüìù Paso 1: Crear Payment Intent");
  try {
    const createResponse = await fetch(
      `${BASE_URL}/api/cotizacion/payments/create-payment-intent`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          cotizacionId: COTIZACION_ID,
          metodoPago: "card",
          montoBase: 1500.0,
          montoConComision: 1562.5,
        }),
      }
    );

    if (createResponse.ok) {
      const createData = await createResponse.json();
      paymentIntentId = createData.paymentIntentId;
      console.log("‚úÖ Payment Intent creado:", paymentIntentId);
    } else {
      console.log("‚ùå Error creando Payment Intent");
      return;
    }
  } catch (error) {
    console.log("‚ùå Error:", error.message);
    return;
  }

  // 2. Simular m√∫ltiples clics de cancelaci√≥n (para probar que los botones se deshabiliten)
  console.log("\nüîÑ Paso 2: Simulando m√∫ltiples clics de cancelaci√≥n");

  const cancelPromises = [];

  // Simular 3 clics r√°pidos (como si el usuario hiciera clic m√∫ltiple)
  for (let i = 1; i <= 3; i++) {
    console.log(`   üñ±Ô∏è Clic ${i} de cancelaci√≥n...`);

    const cancelPromise = fetch(
      `${BASE_URL}/api/cotizacion/payments/cancel-payment-intent`,
      {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ paymentIntentId }),
      }
    )
      .then(async (response) => {
        const data = await response.json();
        const status = response.ok ? "‚úÖ Exitoso" : "‚ö†Ô∏è Error";
        console.log(
          `   üìä Clic ${i} resultado:`,
          status,
          data.message || data.error
        );
        return { click: i, ok: response.ok, data };
      })
      .catch((error) => {
        console.log(`   ‚ùå Clic ${i} fall√≥:`, error.message);
        return { click: i, ok: false, error: error.message };
      });

    cancelPromises.push(cancelPromise);

    // Peque√±a pausa entre clics para simular comportamiento real
    await new Promise((resolve) => setTimeout(resolve, 100));
  }

  // Esperar todos los resultados
  console.log("\n‚è≥ Esperando resultados de todos los clics...");
  const resultados = await Promise.all(cancelPromises);

  // 3. Analizar resultados
  console.log("\nüìä === AN√ÅLISIS DE RESULTADOS ===");

  const exitosos = resultados.filter((r) => r.ok).length;
  const fallidos = resultados.filter((r) => !r.ok).length;

  console.log(`‚úÖ Clics exitosos: ${exitosos}`);
  console.log(`‚ùå Clics fallidos: ${fallidos}`);

  if (exitosos === 1 && fallidos === 2) {
    console.log(
      "üéâ ¬°PERFECTO! Solo un clic proces√≥ la cancelaci√≥n, los dem√°s fueron rechazados"
    );
    console.log(
      "   ‚ú® Esto indica que los estados de loading funcionan correctamente"
    );
  } else if (exitosos > 1) {
    console.log("‚ö†Ô∏è PROBLEMA: M√∫ltiples cancelaciones fueron procesadas");
    console.log(
      "   üîß Los botones podr√≠an no estar deshhabilit√°ndose correctamente"
    );
  } else {
    console.log("üìù Resultado inesperado - revisar logs del servidor");
  }

  console.log("\nüéØ === CONCLUSIONES ===");
  console.log("1. Verificar en el UI que durante la cancelaci√≥n:");
  console.log("   ‚Ä¢ El t√≠tulo del modal cambie a 'Cancelando pago...'");
  console.log("   ‚Ä¢ Los botones se deshabiliten y muestren spinners");
  console.log("   ‚Ä¢ No se puedan hacer m√∫ltiples clics");
  console.log(
    "2. Los Payment Intents duplicados deben ser manejados graciosamente"
  );
  console.log("3. El estado debe limpiarse correctamente al finalizar");
}

// Ejecutar test
testEstadosCancelacion().catch(console.error);
